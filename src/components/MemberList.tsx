import React, { useState } from "react";
import axios from "axios";
import myData from '../data.json';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import ACC_SHEET_API from '../credentials.json';

export default function MemberList(props) {
  const url = 'https://blueprint.cyberlogitec.com.vn/api';
  const currentURL = window.location.href // returns the absolute URL of a page
  const reqId = props.reqId;
  let commentList = [];
  let commentFile = [];
  let [comment, setComment] = useState([]);
  let [countFB, setCountFB] = useState(0);
  let [docTitle, setDocTitle] = useState();
  let [memList, setMemList] = useState([]);
  const SHEET_ID = "Member_List";
  const SPREADSHEET_ID = "10WPahmoB6Im1PyCdUZ_uda3fYijC8jKtHnRBasnTK3Y";
  // SCRIPT_DATA: https://docs.google.com/spreadsheets/d/10WPahmoB6Im1PyCdUZ_uda3fYijC8jKtHnRBasnTK3Y/edit#gid=658870837
  if(props.comment) {
    // setComment(JSON.parse(props.comment).lstUsrCmt);
    // let cmts = JSON.parse(props.comment);
    console.log("props.comment", props.comment);
    // if(cmts) {
    //   setComment(cmts.lstUsrCmt);
    // }
  }
  async function getComments() {
    await axios.post(`${url}/searchCommentTask`, {
      "reqId":reqId
    }).then(res => {
      console.log("Comment", res);
      commentList = res.data.lstUsrCmt;
      commentFile = res.data.lstFilesCmt;
      if(commentList) {
        let count = 0;
        for(let i = 0; i < commentList.length; i ++ ){
          if(commentList[i].cmtCtnt && commentList[i].cmtCtnt.toUpperCase().indexOf('FEEDBACK:') > 0) {
            count ++;
          }
        }
        setCountFB(count);
      }
      setComment(commentList);
      
    });
  }

  async function selectMemberList() {
      //Sheet Start
      // Initialize the sheet - doc ID is the long id in the sheets URL
      const doc = new GoogleSpreadsheet(SPREADSHEET_ID); //script data
      // const doc = new GoogleSpreadsheet('16S2LDwOP3xkkGqXLBb30Pcvvnfui-IPJTXeTOMGCOjk');

      
      
      // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
      await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email:  ACC_SHEET_API.client_id,
        private_key: ACC_SHEET_API.private_key,
      });
      await doc.loadInfo(); // loads document properties and worksheets
      console.log("LOAD", doc.title);
      setDocTitle(doc.title);

      const sheet = doc.sheetsByTitle[SHEET_ID]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
      console.log(sheet.title);
      console.log(sheet.rowCount);
      const range = 'A1:AB50';
      await sheet.loadCells(range); // loads range of cells into local cache - DOES NOT RETURN THE CELLS
      let arrMember = [];
      for(let i = 0; i < 50; i ++) {
        const empCode = sheet.getCell(i, 0); // access cells using a zero-based index
        const userId = sheet.getCell(i, 1); // access cells using a zero-based index
        const fullName = sheet.getCell(i, 2); // access cells using a zero-based index
        const leaveTeam = sheet.getCell(i, 26); // access cells using a zero-based index = sheet.getCell(i, 2); // access cells using a zero-based index
        // console.log("leaveTeam.formattedValue", leaveTeam.formattedValue);
        if(empCode.formattedValue != "" 
          && userId.formattedValue != "" 
          && fullName.formattedValue != ""
          && leaveTeam.formattedValue == "N") {
              let mem = {
                  "empCode":        sheet.getCell(i, 0).formattedValue,
                  "userId":         sheet.getCell(i, 1).formattedValue,
                  "fullName":       sheet.getCell(i, 2).formattedValue,
                  "currentLevel":   sheet.getCell(i, 3).formattedValue,
                  "lvlCode":        sheet.getCell(i, 4).formattedValue,
                  "levelRating":    sheet.getCell(i, 5).formattedValue,
                  "targetLevel":    sheet.getCell(i, 6).formattedValue,
                  "tagartRating":   sheet.getCell(i, 7).formattedValue,
                  "pointOnHour": {
                    "standard":   sheet.getCell(i, 8).formattedValue,
                    "expect":     sheet.getCell(i, 9).formattedValue,
                    "description": sheet.getCell(i, 10).formattedValue
                  },
                  "role":           sheet.getCell(i, 11).formattedValue.split(","),
                  "workload":       sheet.getCell(i, 12).formattedValue,
                  "pointStandard":  sheet.getCell(i, 13).formattedValue,
                  "teamLocal":      sheet.getCell(i, 14).formattedValue.split(","),
                  "dedicated":      sheet.getCell(i, 15).formattedValue,
                  "blueprint_id":   sheet.getCell(i, 16).formattedValue,
                  "blueprint_nm":   sheet.getCell(i, 17).formattedValue,
                  "clickup_id":     sheet.getCell(i, 18).formattedValue,
                  "clickup_nm":     sheet.getCell(i, 19).formattedValue,
                  "effectDateFrom": sheet.getCell(i, 20).formattedValue,
                  "effectDateTo":   sheet.getCell(i, 21).formattedValue,
                  "preReviewDate":  sheet.getCell(i, 22).formattedValue,
                  "nextReviewDate": sheet.getCell(i, 23).formattedValue,
                  "phone":          sheet.getCell(i, 24).formattedValue,
                  "clvEmail":       sheet.getCell(i, 25).formattedValue,
                  "leaveTeam":      sheet.getCell(i, 26).formattedValue,
                  "leaveCompany":   sheet.getCell(i, 27).formattedValue
              }
              arrMember.push(mem);
        }
        
      }
      console.log("arrMember", arrMember);
      setMemList(arrMember);
      
      //Sheet End
  }

  return (
    <div className="grid grid-flow-row gap-2">
      <div className="grid grid-flow-col gap-2">
        <h4>
          #{props.seqNo} MemberList.tsx
        </h4>
        <div>
          <button 
            type="button" 
            className="bg-blue-500 text-white py-2 px-4 rounded-lg"
            onClick={ event => selectMemberList()}>
              Member List
          </button>
        </div>
        
      </div>
      <div>
        {docTitle}
      </div>
    </div>
  );
}
